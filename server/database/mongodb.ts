import { MongoClient, Db, Collection } from 'mongodb';
import { QuizResult } from '@shared/api';

class MongoDBService {
  private client: MongoClient | null = null;
  private db: Db | null = null;

  async connect(): Promise<void> {
    try {
      if (this.client) {
        return; // Already connected
      }

      const connectionString = process.env.MONGODB_CONNECTION_STRING;
      if (!connectionString) {
        throw new Error('MONGODB_CONNECTION_STRING kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong bi·∫øn m√¥i tr∆∞·ªùng');
      }

      this.client = new MongoClient(connectionString);
      await this.client.connect();
      this.db = this.client.db('hcm202_quiz_db'); // T√™n database
      
    } catch (error) {
      console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', error);
      throw error;
    }
  }

  async disconnect(): Promise<void> {
    if (this.client) {
      await this.client.close();
      this.client = null;
      this.db = null;
      console.log('üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
    }
  }

  getCollection<T = any>(name: string): Collection<T> {
    if (!this.db) {
      throw new Error('Database ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi');
    }
    return this.db.collection<T>(name);
  }

  get isConnected(): boolean {
    return this.client !== null && this.db !== null;
  }
}

// Singleton instance
export const mongoService = new MongoDBService();

// Collection helpers
export const getQuizResultsCollection = (): Collection<QuizResult> => {
  return mongoService.getCollection<QuizResult>('quiz_results');
};